% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy_ci.R
\name{tidy_ci}
\alias{tidy_ci}
\title{Get tidy model output with fast CIs}
\usage{
tidy_ci(
  x,
  ci = TRUE,
  ci_denominator = 1.959964,
  exp = FALSE,
  intercept = FALSE,
  tidy_factors = TRUE,
  extreme_ps = TRUE,
  neglog10p = FALSE,
  check_model = TRUE,
  n = NA,
  get_r2 = TRUE,
  conf.int = FALSE,
  quiet = FALSE,
  ...
)
}
\arguments{
\item{x}{object containing model output to be tidied e.g., from a `glm()` or `survival::coxph()`.}

\item{ci}{Logical. Default is TRUE. Calculate CIs using 1.96*SE method - where 1.96 can be modified using `ci_denominator`.}

\item{ci_denominator}{Numeric. Default is 1.96. The standard error of the sample mean (default actually 1.959964 :: from `get_z(0.05)`).}

\item{exp}{Logical. Default is FALSE. Exponentiate estimate and CIs -- also see `check_model`.}

\item{intercept}{Logical. Default is FALSE. Exclude intercept for tidier output.}

\item{tidy_factors}{Logical. Default is TRUE. Tidy `as.factor(x_var)#` terms to `x_var-#`.}

\item{extreme_ps}{Logical. Default is TRUE. If p=0 then return "extreme p-values" as strings.}

\item{neglog10p}{Logical. Default is FALSE. Provides negative log10 p-values (if input is class `glm` or `coxph` or `crr` -- user can provide sample size `n=#` to override).}

\item{check_model}{Logical. Default is TRUE. Set `exp=TRUE` if `glm(family=binomial)` or `survival::coxph()` or `cmprsk::crr()` was performed.}

\item{n}{Numeric. Default is NA. The N for `neglog10p` is extracted automatically for `glm` or `coxph` objects - override here if required.}

\item{get_r2}{Logical. Default is TRUE. get R^2 value if model is linear, or C-statistic if model is CoxPH}

\item{quiet}{Logical. Default is FALSE. Suppress text output}

\item{...}{Other `tidy()` options}
}
\value{
Returns a tibble - summary statistics from a model
}
\description{
By default the (amazing) `broom` package uses the `confint()` function to calculate CIs. 
For GLMs this calculates confidence intervals via profile likelihood by default. 
When using large datasets this takes a long time and does not meaningfully alter the CIs 
compared to simply calculating using 1.96*SE.
This function `tidy_ci()` runs `broom::tidy()` and returns the tidy estimates with CIs 
calculated as EST +/- 1.96*SE. (Well, actually 1.959964 :: from `lukesRlib::get_z(0.05)`)

The function also does a few other nice/useful things to the output: hides the intercept by 
default, automatically detects logistic/CoxPH/CRR models and exponentiates the estimates, 
and if p=0 returns the extreme p as a string. Other optional outputs include -log10 p-values.

Not tested for models other than `glm()` and `survival::coxph()` where it seems to work very well and produces consistent CIs. Also works well for `cmprsk::crr()`.

For linear mixed-effects models `lmer()` from package {lme4} this can display the fixed-effects with p-values and Wald CIs.
}
\examples{
fit_linear = glm(sbp ~ age + sex + as.factor(bmi_cat), data = example_data)
tidy_ci(fit_linear)

fit_logistic = glm(event ~ age + sex + bmi, data = example_data, family = binomial)
tidy_ci(fit_logistic)   # detect model and exponentiate automatically

}
\author{
Luke Pilling
}
