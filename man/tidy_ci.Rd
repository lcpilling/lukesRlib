% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy_ci.R
\name{tidy_ci}
\alias{tidy_ci}
\title{tidy_ci}
\usage{
tidy_ci(
  x = stop("Provide a model fit object"),
  ci = TRUE,
  exp = FALSE,
  intercept = FALSE,
  neglog10p = TRUE,
  check_family = TRUE,
  n = NA,
  conf.int = FALSE,
  ...
)
}
\arguments{
\item{ci}{{default=TRUE} calculate CIs using 1.96*SE method}

\item{exp}{{default=FALSE} exponentiate estimate and CIs -- also see `check_family`}

\item{intercept}{{default=FALSE} Exclude intercept for tidier output}

\item{neglog10p}{{default=TRUE} Provides negative log10 p-values (if input is class `glm` or `coxph` or `crr` -- user can provide sample size `n=#` to override)}

\item{check_family}{{default=TRUE} set `exp=TRUE` if `glm(family=binomial)` or `survival::coxph()` or `cmprsk::crr()` was performed}

\item{n}{{default=NA} the N for `neglog10p` is extracted automatically for `glm` or `coxph` objects - override here if required}

\item{...}{Other `tidy()` options}
}
\value{
Returns a tibble - summary statistics from a model
}
\description{
Function to get tidy model output with fast CIs
}
\details{
By default the (amazing) \pkg{broom} package uses the `confint()` function to calculate CIs. 
For GLMs this calculates confidence intervals via profile likelihood by default. 
When using large datasets this takes a long time and does not meaningfully alter the CIs 
compared to simply calculating using 1.96*SE.
This function `tidy_ci()` runs `broom::tidy()` and returns the tidy estimates with CIs 
calculated as EST +/- 1.96*SE.

The function also does a few other nice/useful things to the output: hides the intercept by 
default, calculates -log10 p-values, and automatically detects logistic/CoxPH/CRR models and 
exponentiates the estimates.

Not tested for models other than `glm()` and `survival::coxph()` where it seems to work very well and produces consistent CIs. Also works well for `cmprsk::crr()`

v0.20230109
}
\examples{
fit_linear = glm(bmi ~ age + sex + as.factor(smoking_status), data = d)
tidy_ci(fit_linear)

fit_logistic = glm(current_smoker_vs_never ~ age + sex + bmi, data = d, family = binomial(link="logit"))
tidy_ci(fit_logistic)   # detect model and exponentiate automatically
tidy_ci(fit_logistic, check_family=FALSE)  # override auto checking to get untransformed estimates

fit_coxph = coxph(Surv(time_to_event, diagnosis_bin) ~ age + sex + bmi + as.factor(smoking_status), data = d)
tidy_ci(fit_coxph)

}
\author{
Luke Pilling
}
