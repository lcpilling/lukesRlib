% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy_ci.R
\name{tidy_ci}
\alias{tidy_ci}
\title{Get tidy model output with fast CIs}
\usage{
tidy_ci(
  x,
  ci = TRUE,
  ci_denominator = 1.959964,
  exp = FALSE,
  intercept = FALSE,
  extreme_ps = TRUE,
  neglog10p = FALSE,
  check_model = TRUE,
  n = NA,
  print_n = TRUE,
  conf.int = FALSE,
  quiet = FALSE,
  ...
)
}
\arguments{
\item{x}{object containing model output to be tidied e.g., from a `glm()` or `survival::coxph()`}

\item{ci}{calculate CIs using 1.96*SE method (default=TRUE) -- well actually, 1.959964 from `get_z(0.05)`}

\item{ci_denominator}{the standard error of the sample mean (default=1.96)}

\item{exp}{exponentiate estimate and CIs -- also see `check_model` (default=FALSE)}

\item{intercept}{Exclude intercept for tidier output (default=FALSE)}

\item{extreme_ps}{If p=0 then return "extreme p-values" as strings (default=TRUE)}

\item{neglog10p}{Provides negative log10 p-values (if input is class `glm` or `coxph` or `crr` -- user can provide sample size `n=#` to override) (default=FALSE)}

\item{check_model}{set `exp=TRUE` if `glm(family=binomial)` or `survival::coxph()` or `cmprsk::crr()` was performed (default=TRUE)}

\item{n}{the N for `neglog10p` is extracted automatically for `glm` or `coxph` objects - override here if required (default=NA)}

\item{print_n}{print the N included in analysis - extracted automatically for `glm` or `coxph` objects (default=TRUE)}

\item{quiet}{Logical. Suppress text output (default=FALSE)}

\item{...}{Other `tidy()` options}
}
\value{
Returns a tibble - summary statistics from a model
}
\description{
By default the (amazing) `broom` package uses the `confint()` function to calculate CIs. 
For GLMs this calculates confidence intervals via profile likelihood by default. 
When using large datasets this takes a long time and does not meaningfully alter the CIs 
compared to simply calculating using 1.96*SE.
This function `tidy_ci()` runs `broom::tidy()` and returns the tidy estimates with CIs 
calculated as EST +/- 1.96*SE. (Well, actually 1.959964 from `lukesRlib::get_z(0.05)`)

The function also does a few other nice/useful things to the output: hides the intercept by 
default, automatically detects logistic/CoxPH/CRR models and exponentiates the estimates, 
and if p=0 returns the extreme p as a string. Other optional outputs include -log10 p-values.

Not tested for models other than `glm()` and `survival::coxph()` where it seems to work very well and produces consistent CIs. Also works well for `cmprsk::crr()`
}
\examples{
fit_linear = glm(bmi ~ age + sex + as.factor(smoking_status), data = d)
tidy_ci(fit_linear)

fit_logistic = glm(current_smoker_vs_never ~ age + sex + bmi, data = d, family = binomial(link="logit"))
tidy_ci(fit_logistic)   # detect model and exponentiate automatically
tidy_ci(fit_logistic, check_model=FALSE)  # override auto checking to get untransformed estimates

fit_coxph = coxph(Surv(time, status) ~ age + sex + as.factor(smoking_status), data = d)
tidy_ci(fit_coxph)

}
\author{
Luke Pilling
}
